#!/bin/bash
usage() {
	cat <<EOF
Description:
        $0 - print path on disk of messages using neomutt cache
Usage:
        $0 [options] <message-id>
Options:
        <message-id>    Message-ID to search for.
                        If -, read mail from stdin. If empty, prompt for ID.
        -h, --help      show this help
        -v, --verbose   print original message IDs after path
        -c, --choose    if message exists in multiple mailboxes, prompt which
                        one to print on stdout
        -m, --mailbox   only print mailbox containing message
EOF
}

opt_choose=
opt_mailbox=
opt_verbose=
eval set -- "$(getopt -o 'chmv' --long choose,help,mailbox,verbose -- "$@")"
while [ -n "$1" ]; do
	case "$1" in
		-h|--help)		usage $0; exit;;
		-c|--choose)		opt_choose=1;;
		-m|--mailbox)		opt_mailbox=1;;
		-v|--verbose)		opt_verbose=1;;
		--)			shift; break;;
		*)			break;;
	esac
	shift
done

path_to_mailbox() {
	filename=$(dirname "$1")
	case "$filename" in
		*/cur) echo "${filename%%cur}";;
		*/new) echo "${filename%%new}";;
		*/tmp) echo "${filename%%tmp}";;
	esac
}
if [ -n "$opt_mailbox" ]; then
	transform_path() { path_to_mailbox "$1"; }
	print_message() { print_verbose "$(transform_path "$1")" "$2"; }
else
	transform_path() { echo "$1"; }
	print_message() { print_verbose "$1" "$2"; }
fi

if [ -n "$opt_verbose" ]; then
	print_verbose() { printf "%s\t%s\n" "${1}" "${2}"; }
else
	print_verbose() { printf "%s\n" "$1"; }
fi

main() {
	ids=
	if [ -z "$1" ]; then
		printf 'Search for Message-ID: ' >&2
		read id
	elif [ "$1" = "-" ]; then
		id=$(sed -n 's/^message-id:\s\+<\?\([^>]*\)>\?/\1/ip')
	else
		id="$1"
	fi

	if [ -z "$id" ]; then
		echo "Missing Message-ID." >&2
		exit 1
	fi

	results=()
	for result in $(notmuch search --format=text --output=files id:"$id"); do
		if [ -n "$opt_choose" ]; then
			results+=( $(transform_path "$result") )
		else
			print_message "$result" "$id"
		fi
	done

	if [ -n "$opt_choose" ]; then
		if [ "${#results[@]}" -gt 1 ]; then
			echo "Choose from multiple results:" >&2
			select tmp in "${results[@]}"; do
				n=$((REPLY-1))
				# we've already transformed the path above if necessary
				print_verbose "${results[$n]}" "$id"
				break
			done
		else
			print_verbose "${results}" "${id}"
		fi
	fi
}

main "$@"
